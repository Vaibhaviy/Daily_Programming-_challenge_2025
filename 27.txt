#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int shortestPath(int V, vector<vector<int>>& edges, int start, int end) {
    vector<vector<int>> adj(V);
    for (auto &e : edges) {
        adj[e[0]].push_back(e[1]);
           adj[e[1]].push_back(e[0]);
    }

    vector<bool> visited(V, false);
    queue<pair<int, int>> q;
    q.push({start, 0});
    visited[start] = true;

    while (!q.empty()) {
        int node = q.front().first;
         int dist = q.front().second;
        q.pop();

        if (node == end) return dist;

        for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            visited[neighbor] = true;
            q.push({neighbor, dist + 1});
        }
        }
   }
    return -1;
}

int main() {
    int V = 3;
    vector<vector<int>> edges = {{0, 1}, {1, 2}};
    int start = 0;int end = 2;
      cout << shortestPath(V, edges, start, end) << endl;
    return 0;
}
